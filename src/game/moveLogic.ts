import { Board } from "./Boards.ts";
import { isKingInCheck } from "./checkLogic.ts";

export const movePiece = (
    board: Board,
    fromRow: number, 
    fromCol: number, 
    toRow: number, 
    toCol: number
): boolean | "promotion" => {
    let piece = board.grid[fromRow][fromCol];

    if (!piece) {
        console.log("–ó–¥–µ—Å—å –Ω–µ—Ç —Ñ–∏–≥—É—Ä—ã!");
        return false;
    }

    let possibleMoves = piece.getAvailableMoves(board.grid);
    let isValidMove = possibleMoves.some(([r, c]) => r === toRow && c === toCol);

    if (!isValidMove) {
        console.log("–§–∏–≥—É—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç —Ç–∞–∫ —Ö–æ–¥–∏—Ç—å!");
        return false;
    }

    if (!board.grid || !board.grid[fromRow] || !board.grid[toRow]) {
        console.error("–û—à–∏–±–∫–∞: `grid` –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∏–ª–∏ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã!");
        return false;
    }

    // ‚úÖ –ï—Å–ª–∏ –Ω–∞ –∫–ª–µ—Ç–∫–µ —Å—Ç–æ–∏—Ç —Ñ–∏–≥—É—Ä–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ ‚Äî –±—å—ë–º –µ—ë
    let targetPiece = board.grid[toRow][toCol];
    // if (targetPiece && targetPiece.color !== piece.color) {
    //     console.log("–§–∏–≥—É—Ä–∞", targetPiece.name, "–±—É–¥–µ—Ç –≤–∑—è—Ç–∞!");
    
    //     // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∏–≥—É—Ä–∞ –≤ capturedPieces –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
    //     if (!board.capturedPieces.includes(targetPiece)) {
    //         board.capturedPieces.push(targetPiece);
    //     }
    // }
    

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∏–≥—É—Ä—ã
    board.grid[fromRow][fromCol] = null;
    board.grid[toRow][toCol] = piece;
    piece.setPosition(toRow, toCol);

    console.log(`–§–∏–≥—É—Ä–∞ ${piece.name} (${piece.color}) –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª–∞—Å—å –Ω–∞ [${toRow}, ${toCol}]`);

    let simulatedBoard = new Board();
    simulatedBoard.grid = board.grid.map(row => [...row]); // –ö–æ–ø–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ—Å–∫–∏
    simulatedBoard.grid[toRow][toCol] = piece;
    simulatedBoard.grid[fromRow][fromCol] = null;

     // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ –∫–æ—Ä–æ–ª—å –ø–æ–¥ —à–∞—Ö –ø–æ—Å–ª–µ —Ö–æ–¥–∞
     if (piece.name === "King" && isKingInCheck(simulatedBoard, piece.color)) {
        console.log("‚ùå –ù–µ–ª—å–∑—è —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ—Ç —Ö–æ–¥ ‚Äì –∫–æ—Ä–æ–ª—å –ø–æ–ø–∞–¥—ë—Ç –ø–æ–¥ —à–∞—Ö!");
        return false;
    }

    // ‚ùå –ó–∞–ø—Ä–µ—â–∞–µ–º —Ö–æ–¥, –µ—Å–ª–∏ –ø–æ—Å–ª–µ –Ω–µ–≥–æ –∫–æ—Ä–æ–ª—å –±—É–¥–µ—Ç –ø–æ–¥ —à–∞—Ö–æ–º
    if (isKingInCheck(simulatedBoard, piece.color)) {
        console.log("‚ùå –ù–µ–ª—å–∑—è —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ—Ç —Ö–æ–¥ ‚Äì –∫–æ—Ä–æ–ª—å –ø–æ–ø–∞–¥—ë—Ç –ø–æ–¥ —à–∞—Ö!");
        return false;
    }
    
    // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –ª–∏ –º–∞—Ç (–µ—Å–ª–∏ –∫–æ—Ä–æ–ª—å –ø–æ–±–∏—Ç)
    if (!board.grid.flat().some(p => p?.name === "King" && p.color !== piece.color)) {
        console.log(`‚ôú –ú–∞—Ç! –ö–æ—Ä–æ–ª—å ${piece.color === "white" ? "—á—ë—Ä–Ω—ã—Ö" : "–±–µ–ª—ã—Ö"} –ø–æ–±–∏—Ç!`);
        alert(`‚ôú –ú–∞—Ç! –ü–æ–±–µ–¥–∏–ª–∏ ${piece.color === "white" ? "–±–µ–ª—ã–µ" : "—á—ë—Ä–Ω—ã–µ"}!`);
        return true;
    }

    // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–ª–∞ –ª–∏ –ø–µ—à–∫–∞ –∫–æ–Ω—Ü–∞ –¥–æ—Å–∫–∏
    if (piece.name === "Pawn" && (toRow === 0 || toRow === 7)) {
        console.log(`‚ôü –ü–µ—à–∫–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ –∫–æ–Ω—Ü–∞ –¥–æ—Å–∫–∏ –Ω–∞ (${toRow}, ${toCol})!`);
        return "promotion";  // ‚úÖ –¢–µ–ø–µ—Ä—å —Å—Ç—Ä–æ–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è
    }

    if (targetPiece && targetPiece.color !== piece.color) {
        console.log("üî¥ –§–∏–≥—É—Ä–∞ –ø–æ–±–∏—Ç–∞:", targetPiece);
        board.capturedPieces.push(targetPiece);
        console.log("–°–ø–∏—Å–æ–∫ –ø–æ–±–∏—Ç—ã—Ö —Ñ–∏–≥—É—Ä:", board.capturedPieces);
    }
    
    
    
    return true;
};
