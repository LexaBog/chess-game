import React from "react"
import { Board } from "../game/Boards.ts";
import { Piece } from "../game/pieces.ts";
import { movePiece } from "../game/moveLogic.ts";
import { isKingInCheck } from "../game/checkLogic.ts";
import { canCastle, performCastle } from "../game/castlingLogic.ts";

interface HandleClickParams {
    row: number;
    col: number;
    board: Board;
    setBoard: React.Dispatch<React.SetStateAction<Board>>;
    currentTurn: "white" | "black";
    setCurrentTurn: React.Dispatch<React.SetStateAction<"white" | "black">>;
    selectedPiece: [number, number] | null;
    setSelectedPiece: React.Dispatch<React.SetStateAction<[number, number] | null>>;
    availableMoves: [number, number][];
    setAvailableMoves: React.Dispatch<React.SetStateAction<[number, number][]>>;
    capturedWhite: Piece[];
    setCapturedWhite: React.Dispatch<React.SetStateAction<Piece[]>>;
    capturedBlack: Piece[];
    setCapturedBlack: React.Dispatch<React.SetStateAction<Piece[]>>;
    setIsCheck: React.Dispatch<React.SetStateAction<"white" | "black" | null>>;
    setPromotion: React.Dispatch<
        React.SetStateAction<{ row: number; col: number; color: "white" | "black" } | null>
    >;
    setWarningMessage: React.Dispatch<React.SetStateAction<string | null>>; 
}

export const handleClick = ({
    row,
    col,
    board,
    setBoard,
    currentTurn,
    setCurrentTurn,
    selectedPiece,
    setSelectedPiece,
    availableMoves,
    setAvailableMoves,
    capturedWhite,
    setCapturedWhite,
    capturedBlack,
    setCapturedBlack,
    setIsCheck,
    setPromotion,
    setWarningMessage,
}: HandleClickParams) => {
    // ‚úÖ –ï—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –ø–æ —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ñ–∏–≥—É—Ä–µ ‚Äî –æ—Ç–º–µ–Ω—è–µ–º –≤—ã–±–æ—Ä
    if (selectedPiece && selectedPiece[0] === row && selectedPiece[1] === col) {
        console.log("–û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∏–≥—É—Ä—ã");
        setSelectedPiece(null);
        setAvailableMoves([]);
        return;
    }

    // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–∫–∏—Ä–æ–≤–∫—É, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ –∫–æ—Ä–æ–ª—è
    if (selectedPiece && board.grid[selectedPiece[0]][selectedPiece[1]]) {
        let king = board.grid[selectedPiece[0]][selectedPiece[1]];
        
        if (king && king.name === "King") {  // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ `king` –Ω–µ null
            console.log("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–æ–∫–∏—Ä–æ–≤–∫–∏...");
    
            if (col === 6 || col === 2) {
                if (canCastle(board, king, col)) {  
                    console.log("‚úÖ –†–æ–∫–∏—Ä–æ–≤–∫–∞ –≤–æ–∑–º–æ–∂–Ω–∞!");
                    performCastle(board, king, col);
                    setSelectedPiece(null);
                    setCurrentTurn(prev => (prev === "white" ? "black" : "white"));
                    return;
                } else {
                    console.log("‚ùå –†–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞!");
                }
            }
        }
    }

    if (!selectedPiece) {
        let piece = board.grid[row][col];
        if (piece && piece.color === currentTurn) {
            setSelectedPiece([row, col]);
            setAvailableMoves(piece.getAvailableMoves(board.grid) || []);
            return;
        }
        return;
    }
    
    // ‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ö–æ–¥
    const [fromRow, fromCol] = selectedPiece;
    console.log(`–ü–æ–ø—ã—Ç–∫–∞ —Ö–æ–¥–∞ –∏–∑ (${fromRow}, ${fromCol}) –≤ (${row}, ${col})`);

    if (!movePiece(board, fromRow, fromCol, row, col)) {
        console.log("‚ùå –ö–æ—Ä–æ–ª—å –æ—Å—Ç–∞—ë—Ç—Å—è –ø–æ–¥ —à–∞—Ö–æ–º.");   
        setSelectedPiece(null);
        setAvailableMoves([]);  
        // ‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        // setWarningMessage("üö® –ù–µ–ª—å–∑—è —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ—Ç —Ö–æ–¥ ‚Äì –∫–æ—Ä–æ–ª—å –ø–æ–ø–∞–¥—ë—Ç –ø–æ–¥ —à–∞—Ö!");  
        // return;
    }
    setSelectedPiece(null);
    setAvailableMoves([]);

   // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º —à–∞—Ö –¥–ª—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –ø–æ—Å–ª–µ —Ö–æ–¥–∞
   const opponentTurn = currentTurn === "white" ? "black" : "white";

   if (isKingInCheck(board, opponentTurn)) {
       console.log(`‚ö†Ô∏è –®–∞—Ö! –ö–æ—Ä–æ–ª—å ${opponentTurn} –ø–æ–¥ –∞—Ç–∞–∫–æ–π.`);
       setIsCheck(opponentTurn);
   } else {
       setIsCheck(null);
   }

   if (board.grid[row][col]?.name === "Pawn" && (row === 0 || row === 7)) {
    console.log("‚ôü –ü–µ—à–∫–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ –∫–æ–Ω—Ü–∞ –¥–æ—Å–∫–∏! –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è...");
    setPromotion({ row, col, color: currentTurn });
    return;
    }

   setCurrentTurn(opponentTurn); 
};
